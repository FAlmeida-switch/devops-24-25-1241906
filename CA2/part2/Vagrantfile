Vagrant.configure("2") do |config|
  config.ssh.forward_agent = true
  config.vm.provider "vmware_fusion"

  # Common provision (without Java installation)
  config.vm.provision "shell", inline: <<-SHELL
    export DEBIAN_FRONTEND=noninteractive
    sudo apt-get update -y
    sudo apt-get install -y iputils-ping avahi-daemon libnss-mdns unzip
    source /etc/environment
  SHELL

  # Database VM
  config.vm.define "db" do |db|
    db.vm.box = "generic/ubuntu1804"
    db.vm.box_version = "4.2.16"
    db.vm.hostname = "db"
    db.vm.network "private_network", ip: "192.168.56.11"
    db.vm.network "forwarded_port", guest: 8082, host: 8082
    db.vm.network "forwarded_port", guest: 9092, host: 9092

    db.vm.provision "shell", inline: <<-SHELL
      wget https://repo1.maven.org/maven2/com/h2database/h2/1.4.200/h2-1.4.200.jar
    SHELL

    db.vm.provision "shell", :run => 'always', inline: <<-SHELL
      java -cp ./h2*.jar org.h2.tools.Server \
        -web -webPort 8082 -webAllowOthers \
        -tcp -tcpPort 9092 -tcpAllowOthers \
        -ifNotExists > /var/log/h2.log 2>&1 &
    SHELL
  end

  # Web VM
  config.vm.define "web" do |web|
    web.vm.box = "generic/ubuntu1804"
    web.vm.box_version = "4.2.16"
    web.vm.hostname = "web"
    web.vm.network "private_network", ip: "192.168.56.10"
    web.vm.network "forwarded_port", guest: 22, host: 2200, id: "ssh", auto_correct: true
    web.vm.network "forwarded_port", guest: 8080, host: 8085
    web.vm.network "forwarded_port", guest: 8081, host: 8086

    web.vm.provider "vmware_fusion" do |v|
      v.vmx["memsize"] = "1024"
    end

    web.vm.provision "shell", inline: <<-SHELL
      export DEBIAN_FRONTEND=noninteractive
      sudo apt-get update -y
      sudo apt-get install -y wget
      wget https://download.java.net/java/GA/jdk11.0.20/8b46f684993f409b986f194259105444/9/GPL/openjdk-11.0.20_linux-x64_bin.tar.gz
      sudo mkdir -p /usr/lib/jvm
      sudo tar xzf openjdk-11.0.20_linux-x64_bin.tar.gz -C /usr/lib/jvm
      sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk-11.0.20/bin/java 100
      sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk-11.0.20/bin/javac 100
      echo "JAVA_HOME=/usr/lib/jvm/jdk-11.0.20" | sudo tee -a /etc/environment
      source /etc/environment
    SHELL

    web.vm.provision "shell", inline: <<-SHELL, privileged: false
      export DEBIAN_FRONTEND=noninteractive
      sudo apt-get install -y tomcat9 tomcat9-admin git

      # Configure SSH
      mkdir -p ~/.ssh
      chmod 700 ~/.ssh
      ssh-keyscan github.com >> ~/.ssh/known_hosts
      chmod 600 ~/.ssh/known_hosts

      # Clone repo
      git clone git@github.com:FAlmeida-switch/devops-24-25-1241906.git || \
      { sleep 5; git clone git@github.com:FAlmeida-switch/devops-24-25-1241906.git; }

      # Build and deploy WAR
      if [ -d "devops-24-25-1241906/CA1/part2" ]; then
        cd devops-24-25-1241906/CA1/part2

        # Ensure correct Java version
        echo "org.gradle.java.home=$JAVA_HOME" > gradle.properties
        export GRADLE_OPTS="-Dorg.gradle.java.home=$JAVA_HOME"

        # Debug info
        echo "=== Java/Gradle Environment ==="
        echo "JAVA_HOME: $JAVA_HOME"
        /usr/lib/jvm/jdk-11.0.20/bin/java -version
        ./gradlew --version

        # Build with logging
        chmod +x gradlew
        ./gradlew clean build 2>&1 | tee gradle_build.log
        if [ $? -ne 0 ]; then
          echo "Gradle build failed! Check gradle_build.log for details."
          exit 1
        fi

        # Deploy to Tomcat
        sudo mkdir -p /var/lib/tomcat9/webapps
        sudo cp ./build/libs/*.war /var/lib/tomcat9/webapps/
        sudo chown -R tomcat:tomcat /var/lib/tomcat9/webapps
        sudo systemctl restart tomcat9
      fi

      # Start Spring Boot app
      if [ -d "devops-24-25-1241906/CA1/part1/basic" ]; then
        cd devops-24-25-1241906/CA1/part1/basic
        ./mvnw clean package
        nohup java -jar target/basic-0.0.1-SNAPSHOT.jar > /var/log/springboot.log 2>&1 &
      fi
    SHELL
  end
end