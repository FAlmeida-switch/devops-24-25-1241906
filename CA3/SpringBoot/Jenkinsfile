pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'falmeidaswitch/ca3-spring-app'
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
        // Comprehensive PATH including all possible Docker locations
        PATH = "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Docker.app/Contents/Resources/bin:${env.PATH}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Verify Environment') {
            steps {
                script {
                    sh '''
                    echo "=== Environment Verification ==="
                    echo "Docker path:"
                    which docker || echo "Docker not found in PATH"
                    echo "Docker version:"
                    /usr/local/bin/docker --version || docker --version || echo "Could not run docker"
                    echo "Java version:"
                    java -version
                    echo "Current PATH: $PATH"
                    '''
                }
            }
        }

        stage('Build and Test') {
            steps {
                script {
                    // Use direct shell commands instead of Docker pipeline steps
                    dir('CA1/part3/react-and-spring-data-rest-basic') {
                        sh 'chmod +x gradlew || true'
                        sh './gradlew clean assemble -x installFrontend'
                        sh './gradlew test'
                        junit 'build/test-results/test/**/*.xml'
                        sh './gradlew javadoc'
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: 'build/docs/javadoc',
                            reportFiles: 'index.html',
                            reportName: 'Javadoc'
                        ])
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Use direct docker commands with full path
                    sh '''
                    cp CA1/part3/react-and-spring-data-rest-basic/build/libs/*.jar CA3/SpringBoot/
                    cd CA3/SpringBoot
                    /usr/local/bin/docker build -t ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} .
                    /usr/local/bin/docker tag ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} ${DOCKER_IMAGE_NAME}:latest
                    '''
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: env.DOCKER_CREDENTIALS_ID,
                        passwordVariable: 'DOCKER_PASSWORD',
                        usernameVariable: 'DOCKER_USERNAME'
                    )]) {
                        sh '''
                        echo "$DOCKER_PASSWORD" | /usr/local/bin/docker login -u "$DOCKER_USERNAME" --password-stdin
                        /usr/local/bin/docker push ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}
                        /usr/local/bin/docker push ${DOCKER_IMAGE_NAME}:latest
                        '''
                    }
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                archiveArtifacts artifacts: 'CA1/part3/react-and-spring-data-rest-basic/build/libs/*.jar', fingerprint: true
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo "Pipeline succeeded!"
        }
        failure {
            echo "Pipeline failed - check logs for details"
        }
    }
}