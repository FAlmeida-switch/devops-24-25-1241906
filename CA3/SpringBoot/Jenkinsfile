// Jenkinsfile for the Spring Boot Application pipeline

pipeline {
    // Start on the built-in node for initial setup and Git checkout.
    agent { label 'built-in' }

    // Define tools (Gradle) that Jenkins should provide.
    tools {
        gradle 'gradle_latest'
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                echo 'Checking out Spring Boot application from remote Repository...'
                git branch: 'main', url: 'https://github.com/FAlmeida-switch/devops-24-25-1241906.git'
            }
        }

        stage('Assemble Spring Boot Frontend and Backend') {
            // CORRECTED AGENT SYNTAX FOR STAGE-LEVEL DOCKER
            agent {
                docker image: 'jenkins/jnlp-agent:jdk17',
                       args: '-v /var/run/docker.sock:/var/run/docker.sock',
                       reuseNode: true
            }
            steps {
                dir('CA1/part3/react-and-spring-data-rest-basic') {
                    echo 'Assembling Spring Boot project...'
                    sh 'chmod +x gradlew'
                    sh './gradlew clean assemble'
                }
            }
        }

        stage('Test Spring Boot') {
            // CORRECTED AGENT SYNTAX FOR STAGE-LEVEL DOCKER
            agent {
                docker image: 'jenkins/jnlp-agent:jdk17',
                       args: '-v /var/run/docker.sock:/var/run/docker.sock',
                       reuseNode: true
            }
            steps {
                dir('CA1/part3/react-and-spring-data-rest-basic') {
                    echo 'Executing J-unit Tests for Spring Boot...'
                    sh './gradlew test'
                    junit 'build/test-results/test/*.xml'
                }
            }
        }

        stage('Build Docker Image') {
            // CORRECTED AGENT SYNTAX FOR STAGE-LEVEL DOCKER
            agent {
                docker image: 'jenkins/jnlp-agent:jdk17',
                       args: '-v /var/run/docker.sock:/var/run/docker.sock',
                       reuseNode: true
            }
            steps {
                script {
                    echo 'Copying JAR to Docker build context...'
                    def springBootProjectDir = 'CA1/part3/react-and-spring-data-rest-basic'
                    def dockerBuildDir = 'CA3/SpringBoot'

                    sh "test -f ${springBootProjectDir}/build/libs/react-and-spring-data-rest-basic-0.0.1-SNAPSHOT.jar || { echo 'JAR not found! Build failed in previous stage?'; exit 1; }"
                    sh "mkdir -p ${dockerBuildDir}"
                    sh "cp ${springBootProjectDir}/build/libs/react-and-spring-data-rest-basic-0.0.1-SNAPSHOT.jar ${dockerBuildDir}/app.jar"

                    echo 'Building Docker image for Spring Boot application...'
                    dockerImage = docker.build("falmeidaswitch/ca3-spring-app:${env.BUILD_NUMBER}", dockerBuildDir)
                    echo "Docker image built: ${dockerImage.id}"
                }
            }
        }

        stage('Publish Docker Image') {
            // CORRECTED AGENT SYNTAX FOR STAGE-LEVEL DOCKER
            agent {
                docker image: 'jenkins/jnlp-agent:jdk17',
                       args: '-v /var/run/docker.sock:/var/run/docker.sock',
                       reuseNode: true
            }
            steps {
                script {
                    echo 'Publishing Docker image to Docker Hub...'
                    docker.withRegistry('https://registry.hub.docker.com', 'FAlmeida-Switch') {
                        dockerImage.push()
                    }
                    echo "Docker image pushed to Docker Hub."
                }
            }
        }

        stage('Archiving Spring Boot Artifacts') {
            // This stage runs on the built-in node, as it just handles files.
            agent { label 'built-in' }
            steps {
                dir('CA1/part3/react-and-spring-data-rest-basic') {
                    echo 'Archiving Spring Boot application artifacts...'
                    archiveArtifacts 'build/libs/*.jar'
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}