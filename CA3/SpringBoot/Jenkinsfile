pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'falmeidaswitch/ca3-spring-app'
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
        PATH = "/usr/local/bin:${env.PATH}"  // Standard path for Docker
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Verify Environment') {
            steps {
                script {
                    sh '''
                    echo "=== Environment Verification ==="
                    echo "Docker version:"
                    docker --version || echo "Docker not found"
                    echo "Java version:"
                    java -version
                    '''
                }
            }
        }

        stage('Build and Test') {
            steps {
                script {
                    // Build using a JDK container
                    docker.image('gradle:jdk17').inside {
                        dir('CA1/part3/react-and-spring-data-rest-basic') {
                            sh 'chmod +x gradlew || true'
                            // Skip frontend tasks if they're causing issues
                            sh './gradlew clean assemble -x installFrontend'
                            sh './gradlew test'
                            junit 'build/test-results/test/**/*.xml'
                            sh './gradlew javadoc'
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'build/docs/javadoc',
                                reportFiles: 'index.html',
                                reportName: 'Javadoc'
                            ])
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Copy built JAR to Docker context
                    sh 'cp CA1/part3/react-and-spring-data-rest-basic/build/libs/*.jar CA3/SpringBoot/'

                    dir('CA3/SpringBoot') {
                        docker.withRegistry('', env.DOCKER_CREDENTIALS_ID) {
                            def customImage = docker.build(
                                "${env.DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}",
                                '.'
                            )
                            customImage.push()
                            customImage.push('latest')
                        }
                    }
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                archiveArtifacts artifacts: 'CA1/part3/react-and-spring-data-rest-basic/build/libs/*.jar', fingerprint: true
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo "Pipeline succeeded!"
        }
        failure {
            echo "Pipeline failed - check logs for details"
        }
    }
}