pipeline {
    agent any

    environment {
        DOCKER_IMAGE_BASE_NAME = 'falmeidaswitch/ca3-spring-app'
        APP_VERSION = "$BUILD_NUMBER"
        PATH = "/usr/local/bin:${env.PATH}"  // Updated Docker path
    }

    stages {
        stage('Verify Environment') {
            steps {
                script {
                    echo "Checking Docker installation..."
                    sh 'docker --version'
                    sh 'docker info'
                    echo "Current PATH: ${PATH}"
                }
            }
        }

        stage('Checkout Source Code') {
            steps {
                checkout([$class: 'GitSCM',
                          branches: [[name: '*/main']],
                          extensions: [],
                          userRemoteConfigs: [[url: 'https://github.com/FAlmeida-switch/devops-24-25-1241906.git']]
                        ])
            }
        }

        stage('Build Backend') {
            steps {
                script {
                    echo "Building Spring Boot backend..."
                    dir('backend') {
                        sh './gradlew assemble'
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                script {
                    echo "Building frontend..."
                    dir('frontend') {
                        sh 'npm install'
                        sh 'npm run build'
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    echo "Running tests..."
                    dir('backend') {
                        sh './gradlew test'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image..."
                    docker.withRegistry('', '') {  // Add your Docker Hub credentials ID if needed
                        def customImage = docker.build(
                            "${env.DOCKER_IMAGE_BASE_NAME}:${env.APP_VERSION}",
                            './backend'
                        )
                        customImage.push()
                        customImage.push('latest')
                    }
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                archiveArtifacts artifacts: 'backend/build/libs/*.jar', fingerprint: true
                archiveArtifacts artifacts: 'frontend/build/**/*', fingerprint: true
            }
        }
    }

    post {
        always {
            echo "Pipeline completed - cleaning up"
            cleanWs()
        }
        success {
            echo "Pipeline succeeded!"
        }
        failure {
            echo "Pipeline failed - check logs for details"
        }
    }
}