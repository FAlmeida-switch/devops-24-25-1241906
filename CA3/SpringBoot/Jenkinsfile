pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'falmeidaswitch/ca3-spring-app'
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
    }

    stages {
        // Single checkout stage is sufficient
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Verify Structure') {
            steps {
                script {
                    sh '''
                    echo "Project structure:"
                    ls -la
                    echo "Spring Boot project contents:"
                    ls -la CA1/part3/react-and-spring-data-rest-basic
                    '''
                }
            }
        }

        stage('Build Backend') {
            steps {
                dir('CA1/part3/react-and-spring-data-rest-basic') {
                    script {
                        sh 'chmod +x gradlew || true'
                        sh './gradlew clean assemble'
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('CA1/part3/react-and-spring-data-rest-basic') {
                    script {
                        sh './gradlew test'
                        junit 'build/test-results/test/**/*.xml'
                    }
                }
            }
        }

        stage('Generate Javadoc') {
            steps {
                dir('CA1/part3/react-and-spring-data-rest-basic') {
                    script {
                        sh './gradlew javadoc'
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: 'build/docs/javadoc',
                            reportFiles: 'index.html',
                            reportName: 'Javadoc'
                        ])
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Copy built JAR to Docker context
                    sh 'cp CA1/part3/react-and-spring-data-rest-basic/build/libs/*.jar CA3/SpringBoot/'

                    dir('CA3/SpringBoot') {
                        docker.withRegistry('', env.DOCKER_CREDENTIALS_ID) {
                            def customImage = docker.build(
                                "${env.DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}",
                                '.'
                            )
                            customImage.push()
                            customImage.push('latest')
                        }
                    }
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                archiveArtifacts artifacts: 'CA1/part3/react-and-spring-data-rest-basic/build/libs/*.jar', fingerprint: true
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo "Pipeline succeeded!"
        }
        failure {
            echo "Pipeline failed - check logs for details"
        }
    }
}