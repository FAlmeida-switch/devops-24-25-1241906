pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'falmeidaswitch/ca3-spring-app'
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Verify Structure') {
            steps {
                script {
                    echo "Project structure:"
                    sh 'ls -la'
                    echo "Spring Boot project contents (CA1/part3/react-and-spring-data-rest-basic):"
                    sh 'ls -la CA1/part3/react-and-spring-data-rest-basic'
                    echo '=== Environment Verification ==='
                    echo 'Docker path:'
                    sh 'which docker'
                    echo 'Docker version:'
                    sh 'docker --version'
                    echo 'Java version:'
                    sh 'java -version'
                }
            }
        }

        stage('Build Backend and Frontend') {
            steps {
                script {
                    echo "Building Spring Boot backend and frontend inside a Docker container..."
                    withDockerContainer(image: 'jenkins/agent:jdk17') {
                        dir('CA1/part3/react-and-spring-data-rest-basic') {
                            sh 'chmod +x gradlew'
                            // --- IMPORTANT CHANGE HERE: Add NPM_CONFIG_CACHE before gradlew ---
                            sh 'NPM_CONFIG_CACHE="node_cache" ./gradlew clean assemble --no-daemon'
                            // This will create a 'node_cache' directory inside 'CA1/part3/react-and-spring-data-rest-basic/'
                        }
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    echo "Running tests inside a Docker container..."
                    withDockerContainer(image: 'jenkins/agent:jdk17') {
                        dir('CA1/part3/react-and-spring-data-rest-basic') {
                            // You might want to set NPM_CONFIG_CACHE here too if tests also depend on npm
                            sh './gradlew test'
                            junit 'build/test-results/test/**/*.xml'
                        }
                    }
                }
            }
        }

        stage('Generate Javadoc') {
            steps {
                script {
                    echo "Generating Javadoc inside a Docker container..."
                    withDockerContainer(image: 'jenkins/agent:jdk17') {
                        dir('CA1/part3/react-and-spring-data-rest-basic') {
                            // And possibly here as well
                            sh './gradlew javadoc'
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'build/docs/javadoc',
                                reportFiles: 'index.html',
                                reportName: 'Javadoc'
                            ])
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building final Docker image..."
                    sh 'cp CA1/part3/react-and-spring-data-rest-basic/build/libs/*.jar CA3/SpringBoot/'

                    dir('CA3/SpringBoot') {
                        docker.withRegistry('', env.DOCKER_CREDENTIALS_ID) {
                            def customImage = docker.build(
                                "${env.DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}",
                                '.'
                            )
                            customImage.push()
                            customImage.push('latest')
                        }
                    }
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                echo "Archiving build artifacts..."
                archiveArtifacts artifacts: 'CA1/part3/react-and-spring-data-rest-basic/build/libs/*.jar', fingerprint: true
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo "Pipeline succeeded!"
        }
        failure {
            echo "Pipeline failed - check logs for details"
        }
    }
}